package sorting

/*
	Comb Sort Сортировка расчёской
	Худшее время: O(n^2)	
	Лучшее время: O(n log n)
	Память: O(1)

	Улучшает сортировку пузырьком.
	Основная идея — устранить черепах, или маленькие значения в конце списка, 
	которые крайне замедляют сортировку пузырьком	В сортировке пузырьком, 
	когда сравниваются два элемента, промежуток (расстояние друг от друга) 
	равен 1. Основная идея сортировки расчёской в том, что этот промежуток может
	быть гораздо больше, чем единица.

	Первоначально нужно брать достаточно большое расстояние между сравниваемыми
	элементами и по мере упорядочивания массива сужать это расстояние вплоть 
	до минимального. Таким образом, мы как бы причёсываем массив, постепенно 
	разглаживая на всё более аккуратные пряди.
	Первоначальный разрыв между сравниваемыми элементами лучше брать с учётом 
	специальной величины, называемой фактором уменьшения, оптимальное значение 
	которой равно примерно 1,247.

	Сначала расстояние между элементами максимально, то есть равно размеру 
	массива минус один. Затем, пройдя массив с этим шагом, необходимо поделить 
	шаг на фактор уменьшения и пройти по списку вновь.
	Так продолжается до тех пор, пока разность индексов не достигнет единицы.
	В этом случае сравниваются соседние элементы как и в сортировке пузырьком, 
	но такая итерация одна.
*/
func CombSort(slice []int) {
	const factor = 1.2473309
	var step = len(slice) - 1

	for step >= 1 {
		for i := 0; i+step < len(slice); i++ {
			if slice[i] > slice[i+step] {
				slice[i], slice[i+step] = slice[i+step], slice[i]
			}
		}
		step = int(float32(step) / factor)
	}
}
